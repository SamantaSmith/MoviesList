

1. Создаем 4 пакета: activities, data, model, utils. Перемещаем MainActivity в пакет activities.

2. Переходим в activity_main. Создаем в нем RecyclerView. Задаем для него id.

3. Имплементируем в dependencies Volley

4. В пакете model создаем класс Movie. В этом классе будет содержаться описание всех свойств
объектов Movie

5. Создаем xml-файл movie_item. В качетве рут-элемента указываем CardView. Естественно, добавляем
dependency для CardView. Также имплементируем библиотеку Picasso

6. Переходим в Movie.Java. Создаем три String-переменные для полей, заданных в movie_item.

7. Создаем пустой конструктор, а также геттеры и сеттеры для всех трех переменных.

8. В пакете data создаем класс MovieAdapter. Наследуемся от класса RecyclerView.Adapter

9. Внутри MovieAdapter создаем класс MovieViewHolder. В нем создаем конструктор суперкласса

10. В объявлении класса MovieAdapter в треугольных скобках указываем созданный холдер.

11. Начинаем заполнять класс MovieViewHolder. До конструктора создаем три переменные для
объектов в нашем XML

12. Внутри конструктора связываем созданные переменные с layout.

13. В классе MovieAdapter создаем переменные Context и ArrayList, а также конструктор класса
MovieAdapter.

14. Имплементируем три необходимых метода суперкласса-адаптера. В методе getItemCount
меняем 0 на movies.size()

15. Переходим в метод onCreateViewHolder. Заполняем его.

16. Переходим в метод onBindViewHolder. Заполняем его.

17. В манифесте устанавливаем атрибут usesCleartextTraffic="true"

18. Переходим в MainActivity. Создаем переменные для работы с RecyclerView

19. Переходим в метод onCreate. Инициализируем созданные переменные, и вызываем метод getMovies,
который в этом же классе и создаем.

20. Реализуем метод getMovies.

21. Инициализируем MovieAdapter и прикрепляем его к recyclerView.

22. Добавляем созданный request в requestQueue

23. Переходим в манифест. Устанавливаем разрешение на интернет